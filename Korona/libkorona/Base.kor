
module Korona {
	@embed export Nil := Builtin.Nil;
	@embed export Bool := Builtin.Bool;
	@embed export Int := Builtin.Int;
	@embed export String := Builtin.String;
	@embed export Product := Builtin.Product;
	@embed export List := Builtin.List;
	@embed export Any := Builtin.Any;
	@embed export Mutator := Builtin.Mutator;
	@embed export Proof := Builtin.Proof;
	@embed export Local := Builtin.Local;
	
	export nil := Builtin.nil;
	
	export (+) := x:Int => y:Int => Builtin.intAdd x y;
	export (-) := x:Int => y:Int => Builtin.intSub x y;
	export (*) := x:Int => y:Int => Builtin.intMul x y;
	export (/) := x:Int => y:Int => Builtin.intDiv x y;
	export (%) := x:Int => y:Int => Builtin.intMod x y;
	
	export (==) := x:Int => y:Int => Builtin.intEq x y;
	export (!=) := x:Int => y:Int => Builtin.intInEq x y;
	@embed export (<) := x:Int => y:Int => Builtin.intLt x y;
	export (>) := x:Int => y:Int => Builtin.intGt x y;
	export (<=) := x:Int => y:Int => Builtin.intLe x y;
	export (>=) := x:Int => y:Int => Builtin.intGe x y;
	
	export (||) := p:Bool => q:Bool => Builtin.boolOr p q;
	export (&&) := p:Bool => q:Bool => Builtin.boolAnd p q;
	
	export (ite) := @implicit T:Meta => c:Bool => t:T => e:T =>
		Builtin.ite T c t e;
	
	export embed := @implicit T:Meta => x:T =>
		Builtin.embed T x;
	export (>>) := @implicit X:Meta => @implicit Y:Meta =>
		m:(Mutator X) => f:(x:X -> (Mutator Y)) => Builtin.seq X Y m f;
	export (>>) := @implicit T:Meta => first:(Mutator Nil) => second:(Mutator T) =>
		first >> (x:Nil => second);
	
	export (chain) := p:(Mutator Nil) => q:(Mutator Nil) =>
		Builtin.seq Nil Nil p (x:Nil => q);
	
	export intFold := count:Int => @implicit T:Meta => initial:T
			=> f:(k:Int -> p:(Proof (k < count)) -> current:T -> T) =>
		Builtin.intFold count T initial f;
	
	export intSum := count:Int => f:(k:Int -> Int) =>
		intFold count 0 (k:Int => p:(Proof (k < count)) => current:Int =>
			current + (f k));
	
	export emptyList := Builtin.emptyList;
	export singletonList := Builtin.singletonList;
	@embed export listLen := @implicit T:Meta => list:(List T)
		=> Builtin.listLen T list;
	export listElem := @implicit T:Meta => list:(List T)
		=> k:Int => p:(Proof (k < (listLen list))) =>
			Builtin.listElem T list k p;
	
	export (+) := @implicit T:Meta => list:(List T) => item:T =>
		Builtin.listAppend T list item;
	
	export any := @implicit T:Meta => x:T =>
		Builtin.any T x;
	
	export print := @implicit T:Meta => x:T =>
		Builtin.print T x;
	
	export do := @implicit T:Meta => m:(Mutator T) =>
		m >> result:T => embed nil;
	
	export localAlloc := @implicit L:Meta => @implicit T:Meta =>
			scope:(v:(Local L) -> Mutator T) =>
		Builtin.localAlloc L T scope;
	export localRead := @implicit L:Meta => local:(Local L) =>
		Builtin.localRead L local;
	export localWrite := @implicit L:Meta => local:(Local L) => value:L =>
		Builtin.localWrite L local value;
	
	export (=) := @implicit L:Meta => local:(Local L) => value:L =>
		Builtin.localWrite L local value;
	
	export Tuple := types:(List Meta) => intFold (listLen types) Nil
		(k:Int => p:(Proof (k < (listLen types))) => prefix:Meta =>
			Product prefix (listElem types k p));
}
